{% extends 'base.html.twig' %}

{% block body %}

	Welcome to {{ game_session.getName() }}, {{ app.user.username }}.

	</br></br></br>
	
	<div id="chat">
		<textarea id="written-text" rows="5" readonly style="overflow-y: scroll;"></textarea>
		</br>
		<textarea id="new-text" rows="2">Writte here.</textarea>
		<button id="send-button">Send</button>
	</div>
	
	<!-- div my_data -->
	<div id="{{ app.user.username }}">
		<div id="import_character_sheet">
			<button id="request_character_sheet_button">Request character sheets</button>
		</div>
	</div>
	
	<div id="other_users_conected"></div>

	{{ ws_client() }}
	
{% endblock %}


{% block javascripts %}

{% javascripts 
	'../app/Resources/public/js/*'
	'@GameSessionBundle/Resources/public/js/*' %}
    <script src="{{ asset_url }}"></script>
{% endjavascripts %}

<script>
	//Global Variables from Twig 
	var user_username = "{{ app.user.username }}";
	//END Global Variables from Twig 
	
	var _WS_URI = "ws://{{ gos_web_socket_server_host }}:{{ gos_web_socket_server_port }}";
	var websocket = WS.connect(_WS_URI);
	//var chatFirstConnection = true;

	var room = "{{ game_session.getId() }}";
	websocket.on("socket/connect", function(session){

		// WEBSOCKET CONECTION
		var route_conection = "gameSession/conection/";
		route_conection = route_conection.concat(room);
		session.subscribe(route_conection, function(uri, payload){
			switch(payload.option) {
			case 0:
				var other_users_conected = JSON.parse(payload.other_users_conected);
				addAllUsers(other_users_conected);
				break;

			case 1:
				addUser(payload.user_username);
				break;

			case 2:
				deleteUser(payload.user_username);
				break;
			}
		});
		// WEBSOCKET CONECTION
		
	    //session.call("sample/sum", {"term1": 2, "term2": 5}).then(
	    //        function(result)
	    //        {
	    //            console.log("RPC Valid!", result);
	    //        },
	    //        function(error, desc)
	    //        {
	    //            console.log("RPC Error", error, desc);
	    //        }
	    //);
		//session.unsubscribe("acme/channel");

		// WEBSOCKET CHAT
		var route_chat = "gameSession/chat/";
		route_chat = route_chat.concat(room);
		session.subscribe(route_chat, function(uri, payload){
			if (payload.text != null) {
				addTextToChat(payload);
			}
		});

		$( "#chat #send-button" ).click(function() {
			var newText = $( "#new-text" ).val();
			session.publish(route_chat, {msg: newText});
		});
		// WEBSOCKET CHAT
		
		// WEBSOCKET IMPORT CHARACTER SHEET
		var route_import_character_sheet = "gameSession/import_character_sheet/";
		route_import_character_sheet = route_import_character_sheet.concat(room);
		session.subscribe(route_import_character_sheet, function(uri, payload){
			switch(payload.option) {
			case "only_view":
				var character_sheets_in_game = JSON.parse(payload.character_sheets_in_game);
				printCharacterSheets(character_sheets_in_game, "only_view");
				break;
			case "request":
				var character_sheets = JSON.parse(payload.character_sheets);
				printCharacterSheets(character_sheets, "request");
				break;

			case "import":
				var character_sheet = JSON.parse(payload.character_sheet);
				if (payload.username_sender == user_username) {
					printCharacterSheet(character_sheet, "import");
				}
				else {
					printCharacterSheet(character_sheet, "only_view");
				}
				break;
			}
		});

		//Request character sheets
		$( "#"+user_username+" > #import_character_sheet > #request_character_sheet_button" ).click(function() {
			var import_character_sheet_option = "request";
			session.publish(route_import_character_sheet, {option: import_character_sheet_option});
		});

		//Import character sheet
		$( "#"+user_username ).on("click", "#import_character_sheet_button", function() {
			var import_character_sheet_option = "import";
			var sheet_id = $(this).parent().children('#sheet_settings').children('#sheet_id').text();
			session.publish(route_import_character_sheet, {
				option: import_character_sheet_option, 
				character_sheet_id: sheet_id});
			$( "#"+sheet_id+"_provisional" ).remove();
		});
		// WEBSOCKET IMPORT CHARACTER SHEET
	});
	websocket.on("socket/disconnect", function(error){
	    $( "#chat #written-text" ).append("Disconnected for " + error.reason + " with code " + error.code);
	    $( "#chat #written-text" ).append("&#10;");
	}); //END WEBSOCKET

	// CONECTION
	function addAllUsers(other_users_conected) {
		for (var count_users = 0; 
			count_users < other_users_conected.length; 
			count_users++) {

			addUser(other_users_conected[count_users]);
		}
	}

	function addUser(user_username) {
		$( "#other_users_conected" ).append("<div id="+user_username+"></div> ");
	}

	function deleteUser(user_username) {
		$( "#other_users_conected > #"+user_username ).remove();
	}
	// CONECTION
	
	// IMPORT CHARACTER SHEET
	function printCharacterSheets(character_sheets, option){

		if (character_sheets != null) { //Object.keys(character_sheets).length >= 1
			for (var count_character_sheets = 0; 
				count_character_sheets < Object.keys(character_sheets).length; 
				count_character_sheets++) {

				printCharacterSheet(character_sheets[count_character_sheets], option);
			}
		}
		else {
			switch(option) {
			case "request":
				alert("You haven't any character sheet");
				break;
			case "import":
				alert("printCharacterSheets option=import FAIL");
				break;
			case "only_view":
				alert("printCharacterSheets option=only_view FAIL");
				break;
			}
		}
	}

	function printCharacterSheet(character_sheet, option) {
		//alert(JSON.stringify(character_sheet));
		var character_sheet_id = character_sheet['sheet_settings']['sheet_id'];
		var character_sheet_user_username = character_sheet['sheet_settings']['user_username'];
		var sheet_destination;
		
		switch(option) {
		case "request":
			character_sheet_id = character_sheet_id.concat("_provisional");
			sheet_destination = user_username;
			break;
		case "import":
			sheet_destination = user_username;
			break;
		case "only_view":
			sheet_destination = "other_users_conected > #"+character_sheet_user_username;
			break;
		}
		
		$( "#"+sheet_destination ).append( 
				"<div id="+character_sheet_id+"></div>" );
		
		for (var count_sections = 0; 
			count_sections < Object.keys(character_sheet).length; 
			count_sections++) {

			if (Object.keys(character_sheet)[count_sections] == "sheet_settings") {
				$( "#"+character_sheet_id ).append( 
					"<div id='sheet_settings' style='display: none;'></div>" );

				for (var count_settings_sections = 0; 
					count_settings_sections < Object.keys(character_sheet['sheet_settings']).length; 
					count_settings_sections++) {

					var actual_key = Object.keys(character_sheet['sheet_settings'])[count_settings_sections];
					$( "#"+character_sheet_id+" > #sheet_settings" ).append( 
						"<span id="+actual_key+">"
						+character_sheet['sheet_settings'][actual_key]+"</span>" );
				}
			}

			else { 
				switch (character_sheet[count_sections].type) {
				case "group":
					typeGroupOfCharacterSheet(character_sheet[count_sections], character_sheet_id);
					break;
				}
			}
		}
		if (option == "request") {
			$( "#"+character_sheet_id ).append(
					"<button id='import_character_sheet_button' value='"+character_sheet_id+"'>Import Character</button>" );

			//Pending to develop
			$( "#"+character_sheet_id ).append(
					"<button id='request_character_sheet_cancel_button' value='"+character_sheet_id+"'>Cancel</button>" );
		}
		else if (option == "import") {
			//Pending to develop
			$( "#"+character_sheet_id ).append(
					"<button id='import_character_sheet_delete_button' value='"+character_sheet_id+"'>Delete</button>" );
		}	
	}

	function typeGroupOfCharacterSheet(group, father_div_identification) {
		$( "#"+father_div_identification ).append( 
			"<div id="+group.id+"></div>" );
		if(group.name) {
			$( "#"+father_div_identification+" > #"+group.id ).append( 
				"<span id='name'>"+group.name+"</span>" );
		}
		
		for (var count_group_sections = 0; 
			count_group_sections < Object.keys(group).length - 3; //Less id, name and type
			count_group_sections++) {
			
			if (group[count_group_sections].type == "group") {
				typeGroupOfCharacterSheet(group[count_group_sections], group.id);
			}
			
			else if (group[count_group_sections].type == "field") {
				typeFieldOfCharacterSheet(group[count_group_sections], group.id);
			}
		}
	}

	function typeFieldOfCharacterSheet(field, father_div_identification){
		$( "#"+father_div_identification ).append( 
				"<div id="+field.id+"><span id='name'>"+field.name+
				"</span><span id='value'>"+field.value+"</span></div>" );
	}

	//})[id*="td_"] to id of character sheet
	$( "#"+user_username ).on("click", "div > #atributtes > div > div", function() {
		alert( $(this).attr("id") );
		alert( $(this).children( "#value" ).text() );
	});

	$( "#"+user_username ).on("click", "div > #abilities > div > div", function() {
		alert( $(this).attr("id") );
		alert( $(this).children( "#value" ).text() );
	});
	//IMPORT CHARACTER SHEET
	
	function addTextToChat(payload){

		if (payload.name_sender != null) {
			$( "#chat #written-text" ).append(payload.date);
			$( "#chat #written-text" ).append("-");
			$( "#chat #written-text" ).append(payload.name_sender);
			$( "#chat #written-text" ).append(": ");
			$( "#chat #written-text" ).append(payload.text);
			$( "#chat #written-text" ).append("&#10;");
		}
		else {
			$( "#chat #written-text" ).append(payload.date);
			$( "#chat #written-text" ).append(": ");
			$( "#chat #written-text" ).append(payload.text);
			$( "#chat #written-text" ).append("&#10;");
			$( "#chat #written-text" ).append("&#10;");
		}
	}
</script>

{% endblock %}
