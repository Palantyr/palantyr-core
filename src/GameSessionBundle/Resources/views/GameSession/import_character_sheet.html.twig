<script type="text/javascript">

	function subscribeImportCharacterSheet(payload) {
 		switch(payload.option) {		
 		case "request":
 			var character_sheets = JSON.parse(payload.character_sheets_json);
 			printRequestCharacterSheets(character_sheets);
 			break;

 		case "import_own":
 			var character_sheet = JSON.parse(payload.character_sheet_json);
 			printImportOwnCharacterSheet(character_sheet);
 			break;

 		case "import_external":
 			var character_sheet = JSON.parse(payload.character_sheet_json);
 			printImportExternalCharacterSheet(character_sheet);
 			break;
 			
 		case "import_all_external":
 			var character_sheets = JSON.parse(payload.character_sheets_json);
 			printImportExternalCharacterSheets(character_sheets);
 			break;
 			
 		case "delete_own":
 			deleteCharacterSheet(payload.character_sheet_id, payload.option);
 			break;
 			
 		case "delete_external":
 			deleteCharacterSheet(payload.character_sheet_id, payload.option, payload.username_sender);
 			break;
 		}
 	}

 	function deleteCharacterSheet (character_sheet_id, option, username_sender) {
 		var character_sheet_location;
		
 		switch(option) {
 		case "delete_own":
 			character_sheet_location = "#"+user_username+" > .character_sheets > #"+character_sheet_id;
 			deleteFunctionalityPanel();
 			break;
 		case "delete_external":
 			character_sheet_location = "#other_users_connected > #"+username_sender+" > #"+character_sheet_id;
 			break;
 		}
 		$(character_sheet_location).remove();
 	}

 	function printRequestCharacterSheets (character_sheets)
 	{
 		if (character_sheets != null) {
 	 		
 			usePopup('Request character sheet','','');
 			$( '.modal-body' ).append('<div id="import_character_sheet"></div>');
 
			for (var character_sheet in character_sheets) {
				printRequestCharacterSheet(character_sheets[character_sheet]);
			}
 		}
 		else {
 			usePopup('Request character sheet','You haven\'t any character sheet');
 	 	}
	}

	//alert(JSON.stringify(character_sheet));
 	function printRequestCharacterSheet (character_sheet)
 	{
 		var character_sheet_id = getCharacterSheetId(character_sheet);
 		var character_sheet_class = 'character_sheet_provisional';
 		var character_sheet_user_username = getUserUsernameFromCharacterSheet(character_sheet);
 		var sheet_destination = '.modal-body > #import_character_sheet';
		
 		$( sheet_destination ).append( 
 				'<div id='+character_sheet_id+' class='+character_sheet_class+'></div>' );

 		for (var key_sections in character_sheet) {
 	 		switch (key_sections) {
	 			case 'character_sheet_settings':
	 				$( '#'+character_sheet_id+'.'+character_sheet_class ).append( 
 					'<div id="character_sheet_settings" style="display: none;"></div>' );

 					for (var key_settings_sections in character_sheet['character_sheet_settings']) { 
 	 					$( '#'+character_sheet_id+'.'+character_sheet_class+' > #character_sheet_settings' ).append( 
 	 	 						'<span id='+key_settings_sections+'>'
 	 	 						+character_sheet['character_sheet_settings'][key_settings_sections]+'</span>' );
 	 				}
	 	 			break;
	
	 			default:
	 				switch (character_sheet[key_sections]['type']) {
	 				case 'group':
	 					typeGroupOfCharacterSheet(character_sheet[key_sections], "#"+character_sheet_id);
		 				break;
	 				}
 	 	 	 		break;
 	 		}
 		}

 		$( '#'+character_sheet_id+'.'+character_sheet_class ).append(
 			'<button id="import_character_sheet_button" value="'+character_sheet_id+'">Import Character</button>' );
 	}

 	function printImportOwnCharacterSheet (character_sheet) 
 	{
 		var character_sheet_id = getCharacterSheetId(character_sheet);
 		var character_sheet_user_username = getUserUsernameFromCharacterSheet(character_sheet);

 		$( '#'+user_username+' > .character_sheets' ).append( 
 				'<div id='+character_sheet_id+' class="character-sheet-own-box"> \
					<div class="content"></div> \
					<div class="action-bar"></div> \
 				</div>' );

 		for (var key_sections in character_sheet) {
 	 		switch (key_sections) {
	 			case 'character_sheet_settings':
	 				$( '#'+character_sheet_id+'.character-sheet-own-box > .content' ).append( 
 					'<div id="character_sheet_settings" style="display: none;"></div>' );

 					for (var key_settings_sections in character_sheet['character_sheet_settings']) { 
 	 					$( '#'+character_sheet_id+'.character-sheet-own-box > .content > #character_sheet_settings' ).append( 
 	 	 						'<span id='+key_settings_sections+'>'
 	 	 						+character_sheet['character_sheet_settings'][key_settings_sections]+'</span>' );
 	 				}
	 	 			break;
	
	 			default:
	 				switch (character_sheet[key_sections]['type']) {
	 				case 'group':
	 					typeGroupOfCharacterSheet(character_sheet[key_sections], '#'+character_sheet_id+' > .content');
		 				break;
	 				}
 	 	 	 		break;
 	 		}
 		}
		$( '#'+character_sheet_id+' > .action-bar' ).append(
 				'<button  id="import_character_sheet_delete_button" title="Delete character sheet" class="btn-lg glyphicon glyphicon-trash" value="'+character_sheet_id+'"></button>' );
 	}

 	function printImportExternalCharacterSheets (character_sheets)
 	{
		for (var character_sheet in character_sheets) {
			printImportExternalCharacterSheet(character_sheets[character_sheet]);
		}
	}

 	function printImportExternalCharacterSheet (character_sheet)
 	{
 		var character_sheet_id = getCharacterSheetId(character_sheet);
 		var character_sheet_user_username = getUserUsernameFromCharacterSheet(character_sheet);
 		var sheet_destination = '#other_users_connected > #'+character_sheet_user_username;

 		$( sheet_destination ).append( 
 				'<div id='+character_sheet_id+' class="character-sheet-external-box"> \
 					<div class="content"></div> \
					<div class="action-bar"></div> \
 				</div>' );
 		
 		for (var key_sections in character_sheet) {
 	 		switch (key_sections) {
	 			case 'character_sheet_settings':
	 				$( '#'+character_sheet_id+'.character-sheet-external-box' ).append( 
 					'<div id="character_sheet_settings" style="display: none;"></div>' );

 					for (var key_settings_sections in character_sheet['character_sheet_settings']) { 
 	 					$( '#'+character_sheet_id+'.character-sheet-external-box > .content > #character_sheet_settings' ).append( 
 	 	 						'<span id='+key_settings_sections+'>'
 	 	 						+character_sheet['character_sheet_settings'][key_settings_sections]+'</span>' );
 	 				}
	 	 			break;
	
	 			default:
	 				switch (character_sheet[key_sections]['type']) {
	 				case 'group':
	 					typeGroupOfCharacterSheet(character_sheet[key_sections], "#"+character_sheet_id+' > .content');
		 				break;
	 				}
 	 	 	 		break;
 	 		}
 		}
 	}

 	function typeGroupOfCharacterSheet(group, father_div_identification) {
 		$( father_div_identification ).append( 
 			"<div id="+group.id+"></div>" );
 		if(group.name) {
 			$( father_div_identification+" > #"+group.id ).append( 
 				"<span id='name'>"+group.name+"</span>" );
 		}
		
 		for (var count_group_sections = 0; 
 			count_group_sections < Object.keys(group).length - 3; //Less id, name and type
 			count_group_sections++) {
			
 			if (group[count_group_sections].type == "group") {
 				typeGroupOfCharacterSheet(group[count_group_sections], father_div_identification+" > #"+group.id);
 			}
			
 			else if (group[count_group_sections].type == "field") {
 				typeFieldOfCharacterSheet(group[count_group_sections], father_div_identification+" > #"+group.id);
 			}
 		}
 	}

 	function typeFieldOfCharacterSheet(field, father_div_identification){
 		$( father_div_identification ).append( 
 				"<div id="+field.id+"><span id='name'>"+field.name+
 				"</span><span id='value'>"+field.value+"</span></div>" );
 	}

 	function getCharacterSheetId (character_sheet) {
 		return character_sheet['character_sheet_settings']['character_sheet_id'];
 	}

 	function getUserUsernameFromCharacterSheet (character_sheet) {
 		return character_sheet['character_sheet_settings']['user_username'];
 	}

</script>