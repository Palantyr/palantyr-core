<script type="text/javascript">

	function subscribeImportCharacterSheet(payload) {
 		switch(payload.option) {
 		case "only_view":
 			var character_sheets_in_game = JSON.parse(payload.character_sheets_in_game);
 			printCharacterSheets(character_sheets_in_game, "only_view");
 			break;
			
 		case "request":
 			var character_sheets = JSON.parse(payload.character_sheets);
 			printCharacterSheets(character_sheets, "request");
 			break;

 		case "import":
 			var character_sheet = JSON.parse(payload.character_sheet);
 			if (payload.username_sender == user_username) {
 				printCharacterSheet(character_sheet, "import");
 			}
 			else {
 				printCharacterSheet(character_sheet, "only_view");
 			}
 			break;
 		case "delete_own":
 			deleteCharacterSheet(payload.character_sheet_id, payload.option);
 			break;
 		case "delete_external":
 			deleteCharacterSheet(payload.character_sheet_id, payload.option, payload.username_sender);
 			break;
 		}
 	}

 	function deleteCharacterSheet (character_sheet_id, option, username_sender) {
 		var character_sheet_location;
		
 		switch(option) {
 		case "delete_own":
 			character_sheet_location = "#"+user_username+" > #character_sheets > #"+character_sheet_id;
 			deleteFunctionalityPanel();
 			break;
 		case "delete_external":
 			character_sheet_location = "#other_users_connected > #"+username_sender+" > #"+character_sheet_id;
 			break;
 		}
 		$(character_sheet_location).remove();
 	}

 	function printCharacterSheets(character_sheets, option){
 	 	
 		if (character_sheets != null) { //Object.keys(character_sheets).length >= 1

 			usePopup('Request character sheet','','');
 			$( '.modal-body' ).append('<div id="import_character_sheet"></div>');
// 			var character_sheets_formated;
			
 			for (var count_character_sheets = 0; 
 				count_character_sheets < Object.keys(character_sheets).length; 
 				count_character_sheets++) {

 				printCharacterSheet(character_sheets[count_character_sheets], option);
 				
//  		 		var character_sheet_id = getCharacterSheetId(character_sheets[count_character_sheets]);
//  		 		var character_sheet_user_username = getUserUsernameFromCharacterSheet(character_sheets[count_character_sheets]);
//  		 		character_sheet_id = character_sheet_id.concat("_provisional");

//  				character_sheets_formated = $( '#'+character_sheet_user_username+ ' #'+character_sheet_id ).html();
 			}
 		}
 		else {
 			switch(option) {
 			case "request":
 				usePopup('Request character sheet','You haven\'t any character sheet','');
 				break;
 			case "import":
 				usePopup('Import character sheet','printCharacterSheets option=import FAIL','');
 				break;
 			case "only_view":
 				usePopup('Only view character sheet','printCharacterSheets option=only_view FAIL','');
 				break;
 			}
 		}
 	}
 	
 	function printCharacterSheetsB(character_sheets, option){ //Desuso
 		if (character_sheets != null) { //Object.keys(character_sheets).length >= 1
 			for (var count_character_sheets = 0; 
 				count_character_sheets < Object.keys(character_sheets).length; 
 				count_character_sheets++) {

 				printCharacterSheet(character_sheets[count_character_sheets], option);
 			}
 			switch(option) {
 			case "request":
 				$("#"+user_username+" > #import_character_sheet > #request_character_sheet_button").remove();
 				$( "#"+user_username+" > #import_character_sheet" ).prepend(
 						"<button id='request_character_sheet_cancel_button'>Cancel</button>" );
 				break;
 			}
 		}
 		else {
 			switch(option) {
 			case "request":
 				alert("You haven't any character sheet");
 				break;
 			case "import":
 				alert("printCharacterSheets option=import FAIL");
 				break;
 			case "only_view":
 				alert("printCharacterSheets option=only_view FAIL");
 				break;
 			}
 		}
 	}

//  	function formatCharacterSheetToPopup (character_sheet)
// 	{
//  		var character_sheet_id = getCharacterSheetId(character_sheet);
//  		var character_sheet_user_username = getUserUsernameFromCharacterSheet(character_sheet);

//  		var character_sheet_formated;
// 	}

 	function printCharacterSheet(character_sheet, option) {
 		//alert(JSON.stringify(character_sheet));
 		var character_sheet_id = getCharacterSheetId(character_sheet);
 		var character_sheet_user_username = getUserUsernameFromCharacterSheet(character_sheet);
 		var sheet_destination;
		
 		switch(option) {
 		case "request":
 			character_sheet_id = character_sheet_id.concat("_provisional");
 			sheet_destination = '.modal-body > #import_character_sheet';
 			break;
 		case "import":
 			sheet_destination = "#"+user_username+" > #character_sheets";
 			break;
 		case "only_view":
 			sheet_destination = "#other_users_connected > #"+character_sheet_user_username;
 			break;
 		}
		
 		$( sheet_destination ).append( 
 				"<div id="+character_sheet_id+"></div>" );
		
 		for (var count_sections = 0; 
 			count_sections < Object.keys(character_sheet).length; 
 			count_sections++) {

 			if (Object.keys(character_sheet)[count_sections] == "character_sheet_settings") {
 				$( "#"+character_sheet_id ).append( 
 					"<div id='character_sheet_settings' style='display: none;'></div>" );

 				for (var count_settings_sections = 0; 
 					count_settings_sections < Object.keys(character_sheet['character_sheet_settings']).length; 
 					count_settings_sections++) {

 					var actual_key = Object.keys(character_sheet['character_sheet_settings'])[count_settings_sections];
 					$( "#"+user_username+" > #import_character_sheet > #"+character_sheet_id+" > #character_sheet_settings" ).append( 
 						"<span id="+actual_key+">"
 						+character_sheet['character_sheet_settings'][actual_key]+"</span>" );
 				}
 			}

 			else { 
 				switch (character_sheet[count_sections].type) {
 				case "group":
 					typeGroupOfCharacterSheet(character_sheet[count_sections], "#"+character_sheet_id);
 					break;
 				}
 			}
 		}
 		if (option == "request") {
 			$( "#"+character_sheet_id ).append(
 					"<button id='import_character_sheet_button' value='"+character_sheet_id+"'>Import Character</button>" );
 		}
 		else if (option == "import") {
 			//Pending to develop
 			$( "#"+character_sheet_id ).append(
 					"<button id='import_character_sheet_delete_button' value='"+character_sheet_id+"'>Delete</button>" );
 		}	
 	}

 	function typeGroupOfCharacterSheet(group, father_div_identification) {
 		$( father_div_identification ).append( 
 			"<div id="+group.id+"></div>" );
 		if(group.name) {
 			$( father_div_identification+" > #"+group.id ).append( 
 				"<span id='name'>"+group.name+"</span>" );
 		}
		
 		for (var count_group_sections = 0; 
 			count_group_sections < Object.keys(group).length - 3; //Less id, name and type
 			count_group_sections++) {
			
 			if (group[count_group_sections].type == "group") {
 				typeGroupOfCharacterSheet(group[count_group_sections], father_div_identification+" > #"+group.id);
 			}
			
 			else if (group[count_group_sections].type == "field") {
 				typeFieldOfCharacterSheet(group[count_group_sections], father_div_identification+" > #"+group.id);
 			}
 		}
 	}

 	function typeFieldOfCharacterSheet(field, father_div_identification){
 		$( father_div_identification ).append( 
 				"<div id="+field.id+"><span id='name'>"+field.name+
 				"</span><span id='value'>"+field.value+"</span></div>" );
 	}

 	function getCharacterSheetId (character_sheet) {
 		return character_sheet['character_sheet_settings']['character_sheet_id'];
 	}

 	function getUserUsernameFromCharacterSheet (character_sheet) {
 		return character_sheet['character_sheet_settings']['user_username'];
 	}

</script>