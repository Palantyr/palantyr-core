<script type="text/javascript">

	function subscribeImportCharacterSheet(payload) 
	{
 		switch(payload.option) {		
 		case 'request':
 			var character_sheets = JSON.parse(payload.character_sheets_json);
 			printRequestCharacterSheets(character_sheets);
 			break;

 		case 'import':
 	 		if (payload.character_sheets_json) {
 	 			var character_sheets = JSON.parse(payload.character_sheets_json);
 	 			printImportCharacterSheetsFormatted(character_sheets);
 	 	 	}
 	 		else {
 	 			var character_sheet = JSON.parse(payload.character_sheet_json);
 				printImportCharacterSheetFormatted(character_sheet);
 	 	 	}
 	 		break;
 			
 		case 'delete':
 			deleteCharacterSheet(payload.character_sheet_id);
 			break;
 		}
 	}

 	function deleteCharacterSheet(character_sheet_id)
 	{
 	 	$( ".main-container > #"+character_sheet_id ).remove();
 	}

 	function printRequestCharacterSheets (character_sheets)
 	{
 		var title = '{% trans %}game_session.request_character_sheets.title{% endtrans %}';

 		if (character_sheets != null) {
 	 		var body = '<div id="import_character_sheet"></div>';
 			usePopup(title, body,'');
 
			for (var character_sheet in character_sheets) {
				printRequestCharacterSheet(character_sheets[character_sheet]);
			}
 		}
 		else {
 	 		var body = '{% trans %}game_session.request_character_sheets.not_to_import{% endtrans %}';
 			usePopup(title, body, '');
 	 	}
	}

	//alert(JSON.stringify(character_sheet));
 	function printRequestCharacterSheet(character_sheet)
 	{
 		var character_sheet_id = getCharacterSheetId(character_sheet);
 		var character_sheet_class = 'character_sheet_provisional';
 		var character_sheet_user_username = getUserUsernameFromCharacterSheet(character_sheet);
 		var sheet_destination = '.modal-body > #import_character_sheet';

 		$( sheet_destination ).append( 
 				'<div id='+character_sheet_id+' class='+character_sheet_class+'></div>' );

 		for (var key_sections in character_sheet) {
 	 		switch (key_sections) { 
	 			case 'character_sheet_settings': 		
	 				$( "#"+character_sheet_id+"."+character_sheet_class ).append( 
 					'<div id="character_sheet_settings" style="display: none;"></div>' );

 					for (var key_settings_sections in character_sheet['character_sheet_settings']) { 
 	 					$( "#"+character_sheet_id+"."+character_sheet_class+" > #character_sheet_settings" ).append( 
 	 	 						'<span id='+key_settings_sections+'>'
 	 	 						+character_sheet['character_sheet_settings'][key_settings_sections]+'</span>' );
 	 				}
	 	 			break;
	
	 			default:
	 				switch (character_sheet[key_sections]['type']) {
	 				case 'group':
	 					typeGroupOfCharacterSheet(character_sheet[key_sections], "#"+character_sheet_id);
		 				break;
	 				}
 	 	 	 		break;
 	 		}
 		}

 		$( "#"+character_sheet_id+"."+character_sheet_class ).append(
 			'<button id="import_character_sheet_button" value="'+character_sheet_id+'">'+"{% trans %}game_session.request_character_sheets.import_button{% endtrans %}"+'</button>' );
 	}

 	function printImportCharacterSheetsFormatted(character_sheets)
 	{
		for (var character_sheet in character_sheets) {
			printImportCharacterSheetFormatted(character_sheets[character_sheet]);
		}
	}

	function getClassFromCharacterSheet(character_sheet)
	{
		if (user_username == getUserUsernameFromCharacterSheet(character_sheet)) {
			return 'character-sheet-owner';
 		}
		else if (game_session_owner_username == getUserUsernameFromCharacterSheet(character_sheet)) {
			return 'character-sheet-gamemaster';
 		}
		else {
			return 'character-sheet-external';
    	}
	}

	function getPermissionToCharacterSheet(character_sheet)
	{
		if (user_username == game_session_owner_username) {
			return 'gamemaster';
 		}
		else if (user_username == getUserUsernameFromCharacterSheet(character_sheet)) {
			return 'owner';
 		}
		else {
			return 'external';
		}
	}

 	function printImportCharacterSheetFormatted(character_sheet)
 	{
		var character_sheet_class = getClassFromCharacterSheet(character_sheet);
		var character_sheet_permission = getPermissionToCharacterSheet(character_sheet);
 	 	
 		var character_sheet_id = getCharacterSheetId(character_sheet);
 		var character_sheet_user_username = getUserUsernameFromCharacterSheet(character_sheet);
		var character_name = getCharacterName(character_sheet);

		var character_sheet_extend_button_trans = '{{ 'game_session.character_sheets.extend_button'|trans }}';
		$( "#main-container" ).append(' \
			<div id='+character_sheet_id+' class="character-sheet '+character_sheet_class+'"> \
				<div id="character_sheet_reduced" class="character-sheet-reduced"> \
					<div class="user-username"> \
						<label>'+character_sheet_user_username+'</label> \
					</div> \
					<div class="character-name"> \
						<label>'+character_name+'</label> \
					</div> \
						<button id="character_sheet_extend_button" title='+character_sheet_extend_button_trans+' class="btn-sm glyphicon glyphicon-user"></button> \
				</div> \
		    	<div id="character_sheet_extended" class="character-sheet-extended"></div> \
			</div> \
		');

		switch(character_sheet_permission) {
		case 'owner', 'gamemaster':
			var character_sheet_delete_button_trans = '{{ 'game_session.character_sheets.delete_button'|trans }}';
			$( "#"+character_sheet_id+" > .character-sheet-reduced" ).append(' \
				<div class="private-options"> \
 					<button  id="character_sheet_delete_button" title='+character_sheet_delete_button_trans+' class="btn-sm glyphicon glyphicon-trash" value="'+character_sheet_id+'"></button> \
 					<button  id="character_sheet_actions" title='+character_sheet_delete_button_trans+' class="btn-sm glyphicon glyphicon-menu-right" value="'+character_sheet_id+'"></button> \
				</div>');

// 			if ()
			break;
		}

		$( "#"+character_sheet_id ).draggable({
		  	scroll: false,
		  	containment: 'parent',
	  		drag: function( event, ui ) {
				$( "#main-container > .character-sheet" ).css("z-index", '');
				$(this).css("z-index", 1);
		  	}
		});

 		for (var key_sections in character_sheet) {
 	 		switch (key_sections) {
	 			case 'character_sheet_settings':
		 			addSettingsToCharacterSheet(character_sheet['character_sheet_settings'], '#'+character_sheet_id);
		 			$( "#"+character_sheet_id+" > #character_sheet_settings" ).append(
	 					'<span id="character_sheet_permission">'+character_sheet_permission+'</span>');
	 	 			break;

	 			case 'character_sheet_functionality':
// 					alert(JSON.stringify(character_sheet['character_sheet_functionality']));
					addFunctionalityToCharacterSheet(character_sheet['character_sheet_functionality'], character_sheet_id);
		 			break;
	
	 			default:
	 				switch (character_sheet[key_sections]['type']) {
	 				case 'group':
	 					typeGroupOfCharacterSheet(character_sheet[key_sections], '#'+character_sheet_id+' > .character-sheet-extended');
		 				break;
	 				}
 	 	 	 		break;
 	 		}
 		}
 	}

 	var character_sheets_functionality = {};
 	var character_sheets_current_functionality = {};
 	function addFunctionalityToCharacterSheet(functionality, character_sheet_id)
 	{
 		for (var functionality_permission in functionality) {
 	 		switch (functionality_permission) {
 	 			case 'character_sheet_owner_functionality':
 	 				addFunctionalityAuxToCharacterSheet(functionality[functionality_permission], character_sheet_id);
 	 				break;
 	 			case 'character_sheet_gamemaster_functionality':
 	 	 			//if gamemaster
 	 				break;
 	 		}
 		}
 	}

 	function addFunctionalityAuxToCharacterSheet(functionality_permission, character_sheet_id)
 	{
 		character_sheets_functionality[character_sheet_id] = {};
		character_sheets_current_functionality[character_sheet_id] = {};
 		for (var functionalites in functionality_permission) {
 			if (functionality_permission[functionalites]['functionality_type'] == 'individual') {
	 			addIndividualFunctionalityToCharacterSheet(functionality_permission[functionalites], character_sheet_id);
 		 	}
 			else if (functionality_permission[functionalites]['functionality_type'] == 'collective') {
				//AddCollectiveFunction
 	 		}
 		}
 	}

 	function addIndividualFunctionalityToCharacterSheet(functionality, character_sheet_id)
 	{
 		character_sheets_functionality[character_sheet_id][functionality['identifier']] = functionality;
 		
		$( '#'+character_sheet_id ).on('click', '#'+functionality['identifier'], function() {
// 			alert(JSON.stringify(character_sheets_current_functionality));
			
			if (checkAndPrepareFunctionalityPanel(character_sheet_id, functionality['identifier']) == true) {
				character_sheets_current_functionality[character_sheet_id][functionality['identifier']] = character_sheets_functionality[character_sheet_id][functionality['identifier']];
				//launch_system
				if (functionality['list_of_modifiers']) {
					listOfModifiers(functionality['list_of_modifiers'], character_sheet_id);
				}
				$( '#'+character_sheet_id+' > #character_sheet_extended > #functional_panel').append('<button id="functional_panel_throw_button" title="Throw" class="btn-sm glyphicon glyphicon-th-large"></button>');
				$( '#'+character_sheet_id+' > #character_sheet_extended > #functional_panel').append('<button id="functional_panel_cancel_button" title="Cancel" class="btn-sm glyphicon glyphicon-remove-sign"></button>');
	 	 		//add cancel button and functionality
			}
			else {
				//message of no allow multiple
			}
		});
 	}

 	function listOfModifiers(list_of_modifiers, character_sheet_id)
 	{
		switch(list_of_modifiers['type']) {
		case 'field':
			var value = $( '#'+list_of_modifiers['name']+' > #value' ).text();
			$( '#'+character_sheet_id+' > #character_sheet_extended > #functional_panel > #functional_panel_data').append('<input type="number" name='+list_of_modifiers['name']+' value='+value+'>');
			break;

		case 'derived':
			var value = $( '#'+list_of_modifiers['name']+' > #value' ).text();
			$( '#'+character_sheet_id+' > #character_sheet_extended > #functional_panel > #functional_panel_data').append('<span name='+list_of_modifiers['name']+' value='+value+'>'+value+'</span>');
			break;

		case 'sum':
			for(var value_count = 0 ; value_count < list_of_modifiers['value'].length ; value_count++) {
// 				alert(JSON.stringify(list_of_modifiers['value'][value_count]));
				listOfModifiers(list_of_modifiers['value'][value_count], character_sheet_id);
				if (value_count + 1  < list_of_modifiers['value'].length) {
					$( '#'+character_sheet_id+' > #character_sheet_extended > #functional_panel > #functional_panel_data').append('<span name="sum"> + </span>');
				}
			}		
			break;

		case 'dice':
			$( '#'+character_sheet_id+' > #character_sheet_extended > #functional_panel > #functional_panel_data').append('<span name="dice" value='+list_of_modifiers['value']+'>d'+list_of_modifiers['value']+'</span>');
			break;
		}
 	}

 	function checkAndPrepareFunctionalityPanel(character_sheet_id, new_identifier)
 	{
 	 	if ( !$( '#'+character_sheet_id+' > #character_sheet_extended > #functional_panel' ).length ) {
 	 		$( '#'+character_sheet_id+' > #character_sheet_extended').prepend(' \
 	 	 	 		<div id="functional_panel" class="character-sheet-functional-panel"> \
						<div id="functional_panel_data"></div> \
 	 	 	 		</div>');
 	 		return true;
 	 	}
 	 	else {
 	 	 	for (character_sheet_current_functionalites in character_sheets_current_functionality[character_sheet_id]) {
 	 	 		if (checkAndPrepareFunctionalityPanelAux(character_sheets_current_functionality[character_sheet_id][character_sheet_current_functionalites], new_identifier) == true) {
					return true;
 	 	 	 	}
 	 	 	}
 	 	 	return false;
 	 	}
	}

	function checkAndPrepareFunctionalityPanelAux(character_sheet_current_functionalites, new_identifier)
	{
		for (multiple_selection_list in character_sheet_current_functionalites['multiple_selection_list']) {
			if (character_sheet_current_functionalites['multiple_selection_list'][multiple_selection_list] == new_identifier) {
				return true;
			}
		}
		return false;
	}

 	function addSettingsToCharacterSheet(settings, father_div_identification)
 	{
		$( father_div_identification ).append(
			'<div id="character_sheet_settings" style="display: none;"></div>' );

		for (var setting in settings) { 
			$( father_div_identification+' > #character_sheet_settings' ).append( 
					'<span id='+setting+'>'
					+settings[setting]+'</span>' );
		}
 	}

 	function typeGroupOfCharacterSheet(group, father_div_identification) 
 	{
 		$( father_div_identification ).append( 
 			"<div id="+group.id+"></div>" );
 		if(group.name) {
 			$( father_div_identification+" > #"+group.id ).append(
 				"<span id='name'>"+group.name+"</span>" );
 		}
		
 		for (var count_group_sections = 0; 
 			count_group_sections < Object.keys(group).length; //-3 Less id, name and type
 			count_group_sections++) {

 			if (group[count_group_sections] && group[count_group_sections].type.length) { // != undefined

 				switch(group[count_group_sections].type) {
 				case 'field':
 					typeFieldOfCharacterSheet(group[count_group_sections], father_div_identification+" > #"+group.id);
 	 				break;

 				case 'group':
 					typeGroupOfCharacterSheet(group[count_group_sections], father_div_identification+" > #"+group.id);
 	 				break;

 				case 'derived':
 					typeDerivedOfCharacterSheet(group[count_group_sections], father_div_identification+" > #"+group.id);
 	 				break;
 				}
 			}
 		}
 	}

 	function typeFieldOfCharacterSheet(field, father_div_identification) 
 	{
		var new_class = '';
		if ($.isNumeric(field.value)) {
			new_class = 'functional';
		}
 		
 		$( father_div_identification ).append(
			'<div id='+field.id+' class='+new_class+'> \
				<span id="name">'+field.name+'</span> \
				<span id="value">'+field.value+'</span> \
			</div>' );
 	}

 	function typeDerivedOfCharacterSheet(field, father_div_identification)
 	{
		var new_class = '';
		if ($.isNumeric(field.value)) {
			new_class = 'functional';
		}
		
 		$( father_div_identification ).append(
			'<div id='+field.id+' class='+new_class+'> \
				<span id="name">'+field.name+'</span> \
				<span id="value">'+field.value+'</span> \
			</div>' );
 	}

 	function getCharacterSheetId(character_sheet) 
 	{
 		return character_sheet['character_sheet_settings']['character_sheet_id'];
 	}

 	function getUserUsernameFromCharacterSheet(character_sheet) 
 	{
 		return character_sheet['character_sheet_settings']['user_username'];
 	}

 	function getCharacterName(character_sheet)
 	{
		return character_sheet['character_sheet_settings']['character_sheet_name'];
 	}

 	function getCharacterSheetIdFromJQuery(element)
 	{
 	 	if ($( element ).attr('id') == 'main-container') {
			return null;
 	 	}
 	 	else if ($( element ).hasClass('character-sheet')) {
			return $( element ).attr('id');
		}
		else {
			return getCharacterSheetIdFromJQuery($( element ).parent());
		}
 	}

 	function deleteFunctionalPanelFromCharacterSheet(character_sheet_id)
 	{
 		$( "#main-container > #"+character_sheet_id+" > #character_sheet_extended > #functional_panel").remove();
 		character_sheets_current_functionality[character_sheet_id] = {};
 	}

 	//Change it to gamesession.js to send
 	$( "#main-container" ).on("click", "#functional_panel_throw_button", function() {
		var character_sheet_id = getCharacterSheetIdFromJQuery(this);
		if (character_sheet_id) {
			alert(JSON.stringify(character_sheets_current_functionality[character_sheet_id]));
			deleteFunctionalPanelFromCharacterSheet(character_sheet_id);
		}
 	});

 	$( "#main-container" ).on("click", "#functional_panel_cancel_button", function() {
		var character_sheet_id = getCharacterSheetIdFromJQuery(this);
		if (character_sheet_id) {
			deleteFunctionalPanelFromCharacterSheet(character_sheet_id);
		}
 	});

	$( "#main-container" ).on("click", "#character_sheet_extend_button", function() {
		if ($( this ).parent().siblings('.character-sheet-extended').css('display') == 'none') {
			$( this ).parent().siblings('.character-sheet-extended').css('display', 'table');
		}
		else {
			$( this ).parent().siblings('.character-sheet-extended').css('display', 'none');
		}
	});
</script>