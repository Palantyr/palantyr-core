<script type="text/javascript">

	function subscribeImportCharacterSheet(payload) {
 		switch(payload.option) {		
 		case "request":
 			var character_sheets = JSON.parse(payload.character_sheets_json);
 			printRequestCharacterSheets(character_sheets);
 			break;

 		case "import_own":
 			var character_sheet = JSON.parse(payload.character_sheet_json);
			printImportCharacterSheetFormatted(character_sheet, 'owner');
 			break;

 		case "import_external":
 			var character_sheet = JSON.parse(payload.character_sheet_json);
			printImportCharacterSheetFormatted(character_sheet, 'external');
 			break;
 			
 		case "import_all_external":
 			var character_sheets = JSON.parse(payload.character_sheets_json);
 			printImportCharacterSheetsFormatted(character_sheets, 'external');
 			break;
 			
 		case "delete":
 			deleteCharacterSheet(payload.character_sheet_id);
 			break;
 		}
 	}

 	function deleteCharacterSheet(character_sheet_id)
 	{
 	 	$('.main-container > #'+character_sheet_id).remove();
 	}

 	function printRequestCharacterSheets (character_sheets)
 	{
 		var title = '{% trans %}game_session.request_character_sheets.title{% endtrans %}';

 		if (character_sheets != null) {
 	 		var body = '<div id="import_character_sheet"></div>';
 			usePopup(title, body,'');
 
			for (var character_sheet in character_sheets) {
				printRequestCharacterSheet(character_sheets[character_sheet]);
			}
 		}
 		else {
 	 		var body = '{% trans %}game_session.request_character_sheets.not_to_import{% endtrans %}';
 			usePopup(title, body, '');
 	 	}
	}

	//alert(JSON.stringify(character_sheet));
 	function printRequestCharacterSheet(character_sheet)
 	{
 		var character_sheet_id = getCharacterSheetId(character_sheet);
 		var character_sheet_class = 'character_sheet_provisional';
 		var character_sheet_user_username = getUserUsernameFromCharacterSheet(character_sheet);
 		var sheet_destination = '.modal-body > #import_character_sheet';

 		$( sheet_destination ).append( 
 				'<div id='+character_sheet_id+' class='+character_sheet_class+'></div>' );

 		for (var key_sections in character_sheet) {
 	 		switch (key_sections) { 
	 			case 'character_sheet_settings': 		
	 				$( '#'+character_sheet_id+'.'+character_sheet_class ).append( 
 					'<div id="character_sheet_settings" style="display: none;"></div>' );

 					for (var key_settings_sections in character_sheet['character_sheet_settings']) { 
 	 					$( '#'+character_sheet_id+'.'+character_sheet_class+' > #character_sheet_settings' ).append( 
 	 	 						'<span id='+key_settings_sections+'>'
 	 	 						+character_sheet['character_sheet_settings'][key_settings_sections]+'</span>' );
 	 				}
	 	 			break;
	
	 			default:
	 				switch (character_sheet[key_sections]['type']) {
	 				case 'group':
	 					typeGroupOfCharacterSheet(character_sheet[key_sections], "#"+character_sheet_id);
		 				break;
	 				}
 	 	 	 		break;
 	 		}
 		}

 		$( '#'+character_sheet_id+'.'+character_sheet_class ).append(
 			'<button id="import_character_sheet_button" value="'+character_sheet_id+'">'+"{% trans %}game_session.request_character_sheets.import_button{% endtrans %}"+'</button>' );
 	}

 	function printImportCharacterSheetsFormatted(character_sheets, option)
 	{
		for (var character_sheet in character_sheets) {
			printImportCharacterSheetFormatted(character_sheets[character_sheet], option);
		}
	}
	
 	function printImportCharacterSheetFormatted(character_sheet, use_control)
 	{
 		var character_sheet_id = getCharacterSheetId(character_sheet);
 		var character_sheet_user_username = getUserUsernameFromCharacterSheet(character_sheet);
		var character_name = getCharacterName(character_sheet);

		var user_control_class = '';
		switch(use_control) {
		case 'owner':
			user_control_class = 'character-sheet-owner';
			break;
		case 'external':
			user_control_class = 'character-sheet-external';
			break;
		case 'gamemaster':
			user_control_class = 'character-sheet-gamemaster';
			break; 
		}

		$( '#main-container' ).append(' \
			<div id='+character_sheet_id+' class='+user_control_class+'> \
				<div id="character-sheet-reduced" class="character-sheet-reduced"> \
					<label class="user_username">'+character_sheet_user_username+'</label> \
					<br/> \
					<label class="character_name">'+character_name+'</label> \
					<button id="character_sheet_extend_button" title="{% trans %}game_session.character_sheets.extend_button{% endtrans %}" class="btn-sm glyphicon glyphicon-user"></button> \
				</div> \
		    	<div id="character-sheet-extended" class="character-sheet-extended"></div> \
			</div> \
		');

		switch(use_control) {
		case 'owner':
			$( '#'+character_sheet_id+' > .character-sheet-reduced' ).append(
	 				'<button  id="character_sheet_delete_button" title="{% trans %}game_session.character_sheets.delete_button{% endtrans %}" class="btn-lg glyphicon glyphicon-trash" value="'+character_sheet_id+'"></button>' );
			break;
		case 'gamemaster':
			$( '#'+character_sheet_id+' > .character-sheet-reduced' ).append(
	 				'<button  id="character_sheet_delete_button" title="{% trans %}game_session.character_sheets.delete_button{% endtrans %}" class="btn-lg glyphicon glyphicon-trash" value="'+character_sheet_id+'"></button>' );
			break; 
		}

		$( '#'+character_sheet_id ).draggable({
		  scroll: false,
		  containment: 'parent'
		});

 		for (var key_sections in character_sheet) {
 	 		switch (key_sections) {
	 			case 'character_sheet_settings':
		 			settingsOfCharacterSheet(character_sheet['character_sheet_settings'], '#'+character_sheet_id);
		 			$( '#'+character_sheet_id+' > #character_sheet_settings' ).append(
	 					'<span id="use_control">'+use_control+'</span>');
	 	 			break;
	
	 			default:
	 				switch (character_sheet[key_sections]['type']) {
	 				case 'group':
	 					typeGroupOfCharacterSheet(character_sheet[key_sections], '#'+character_sheet_id+' > .character-sheet-extended');
		 				break;
	 				}
 	 	 	 		break;
 	 		}
 		}
 	}

 	function settingsOfCharacterSheet(settings, father_div_identification)
 	{
		$( father_div_identification ).append(
			'<div id="character_sheet_settings" style="display: none;"></div>' );

		for (var setting in settings) { 
			$( father_div_identification+' > #character_sheet_settings' ).append( 
					'<span id='+setting+'>'
					+settings[setting]+'</span>' );
		}
 	}
 	
	$( '#main-container' ).on("click", "#character_sheet_extend_button", function() {
		if ($( this ).parent().siblings('.character-sheet-extended').css('display') == 'none') {
			$( this ).parent().siblings('.character-sheet-extended').css('display', 'flex');
		}
		else {
			$( this ).parent().siblings('.character-sheet-extended').css('display', 'none');
		}
	});

 	function typeGroupOfCharacterSheet(group, father_div_identification) 
 	{
 		$( father_div_identification ).append( 
 			"<div id="+group.id+"></div>" );
 		if(group.name) {
 			$( father_div_identification+" > #"+group.id ).append(
 				"<span id='name'>"+group.name+"</span>" );
 		}
		
 		for (var count_group_sections = 0; 
 			count_group_sections < Object.keys(group).length; //-3 Less id, name and type
 			count_group_sections++) {

 			if (group[count_group_sections] && group[count_group_sections].type.length) { // != undefined

 				switch(group[count_group_sections].type) {
 				case 'field':
 					typeFieldOfCharacterSheet(group[count_group_sections], father_div_identification+" > #"+group.id);
 	 				break;

 				case 'group':
 					typeGroupOfCharacterSheet(group[count_group_sections], father_div_identification+" > #"+group.id);
 	 				break;

 				case 'derived':
 					typeDerivedOfCharacterSheet(group[count_group_sections], father_div_identification+" > #"+group.id);
 	 				break;
 				}
 			}
 		}
 	}

 	function typeFieldOfCharacterSheet(field, father_div_identification) 
 	{
		var new_class = '';
		if ($.isNumeric(field.value)) {
			new_class = 'functional';
		}
 		
 		$( father_div_identification ).append(
			'<div id='+field.id+' class='+new_class+'> \
				<span id="name">'+field.name+'</span> \
				<span id="value">'+field.value+'</span> \
			</div>' );
 	}

 	function typeDerivedOfCharacterSheet(field, father_div_identification)
 	{
		var new_class = '';
		if ($.isNumeric(field.value)) {
			new_class = 'functional';
		}
		
 		$( father_div_identification ).append(
			'<div id='+field.id+' class='+new_class+'> \
				<span id="name">'+field.name+'</span> \
				<span id="value">'+field.value+'</span> \
			</div>' );
 	}

 	function getCharacterSheetId(character_sheet) 
 	{
 		return character_sheet['character_sheet_settings']['character_sheet_id'];
 	}

 	function getUserUsernameFromCharacterSheet(character_sheet) 
 	{
 		return character_sheet['character_sheet_settings']['user_username'];
 	}

 	function getCharacterName(character_sheet)
 	{
		return character_sheet['character_sheet_settings']['character_sheet_name'];
 	}
</script>